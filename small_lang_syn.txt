I really need to try to approach this as C++, not "imperative Haskell" like I
have been. e.g. no immutable data structures, no pattern matching,
getters/setters for things instead of direct access, etc.

Like when evaluating function application. I can bind all the params to the args
in the Env map, then evaluate the function body. But then I have to remove them
from the Env again! And _that_ could lead to variables being overwritten instead
of shadowed. WHICH IS WHY IMMUTABLE WORKS BETTER.
Easiest solution of course is to just copy...

TODO:
- Evaluate
- Case, Patterns
- Semicolons unnecessary (a la Go), newlines no longer syntactically significant
- Update to C++ 11
- Separate AST and interpreter. Basically, prepare for compilation.

OK so let's talk about syntax.

=== Literals:

Id: [_A-Za-z] [_0-9A-Za-z-]*

Bools: true | false

Ints: (+|-) [0-9]+
Ints: '0x' [0-A]+

Floats: int '.' [0-9]+
Floats: float 'e' int

Char literals: ''' <?> '''
String literals: '"' char* '"'
Multiline string literal: '"""' char* '"""'

comma sep list: expr (',' expr)*
List literals: '[' comma_sep_list? ']'
Tuple literals: '(' comma_sep_list? ')'

map pair: Id '=>' expr
Map literals: '{' (map_pair (',' map_pair)*)? '}'

=== Expressions:

EId: id
EInt: Ints
EBool: true/false
EFloat: Floats
EChar: Char
EString: String | Multiline string
EList: List
ETuple: Tuple
EMap: Map

EOp2: expr op expr
EOp1: op expr

ELambda: '(\' (id type)+ '->' (expr | Assign* Return) ')'

EApp: expr(comma_sep_list)

EIf: 'if' expr 'then' expr 'else' expr
ECase: 'case' expr 'of' (pattern '->' expr)+

Expr : '(' expr ')'

=== Statements:

Seq: statement+
Assign: id '=' expr ';'
Function: id (id)+ '=' (expr | Assign* Return)
Return: 'return' expr ';'

=== Patterns:

PInt: Ints
PFloat: Floats
PChar: Char
PString: String | Multiline string

PList: List
PSplit: pattern ':' pattern
PTuple: Tuple
// No maps!

PId: id
PAt: id '@' pattern
PNop: '_'

=== Values:

VInt: Int
VFloat: Float
VBool: Bool
VChar: Char
VString: String
VList: List
VTuple: Tuple
VClos: Environment + Lambda

VMap: Map
